on:
  workflow_call:
    inputs:
      cache_version:
        type: string
        default: '1'
      schemas:
        type: string
        default: ''
      backend_exclude:
        type: string
        default: ''
      check_postgres_logs:
        type: boolean
        default: true


jobs:
  code-coverage-sqlite:
    if: ${{ !contains(inputs.backend_exclude, 'sqlite')}}
    name: "ðŸ§ª Tests: ${{ matrix.config.backend }}"
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        config:
          - backend: SQLite
            id: sqlite
            args: 'list(dbname = file.path(tempdir(), "SQLite.SQLite"))'
            schemas: ''

          - backend: SQLite - w. schemas
            id: sqlite-schemas
            args: 'list(dbname = file.path(tempdir(), "SQLite_schemas.SQLite"))'
            schemas: ${{ inputs.schemas }}

    env:
      BACKEND: ${{ matrix.config.backend }}
      BACKEND_DRV: RSQLite::SQLite
      BACKEND_ARGS: ${{ matrix.config.args }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Install dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - name: Setup BACKEND_POST_CONNECT
        if: ${{ matrix.config.schemas != '' }}
        run: |
          set -o xtrace
          IFS=',' read -ra schemas <<< "${{ matrix.config.schemas }}"

          CONN_POST_CONNECT="list("
          for schema in "${schemas[@]}"; do
            CONN_POST_CONNECT+="paste0(\"ATTACH '\", file.path(tempdir(), \"SQLite_schemas_${schema}.SQLite\"), \"' AS '${schema}'\"), "
          done
          # Trim trailing ", " from CONN_POST_CONNECT
          CONN_POST_CONNECT=${CONN_POST_CONNECT%??}
          CONN_POST_CONNECT+=")"

          echo "BACKEND_POST_CONNECT=$CONN_POST_CONNECT" >> $GITHUB_ENV

      - name: Generate and Save Coverage Report
        run: |
          coverage <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
          saveRDS(coverage, "coverage_results.rds")
        shell: Rscript {0}

      - name: Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.config.id }}
          path: coverage_results.rds

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${{ runner.temp }}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          grep -q "FAIL 0" $TESTTHAT_OUT || { echo "Test failures found"; exit 1; }
          grep -q "WARN 0" $TESTTHAT_OUT || { echo "Test warnings found"; exit 1; }

          # Throw error if error: are found
          if grep -q "Error:" $TESTTHAT_OUT; then
            echo "Error: found"
            exit 1
          fi
        shell: bash


  code-coverage-duckdb:
    if: ${{ !contains(inputs.backend_exclude, 'duckdb')}}
    name: "ðŸ§ª Tests: DuckDB"
    runs-on: ubuntu-latest

    env:
      BACKEND: DuckDB
      BACKEND_DRV: duckdb::duckdb
      BACKEND_ARGS: 'list(dbdir = file.path(tempdir(), "DuckDB.duckdb"))'
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Install dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - name: Setup BACKEND_POST_CONNECT
        run: |
          set -o xtrace
          IFS=',' read -ra schemas <<< "${{ inputs.schemas }}"

          CONN_POST_CONNECT="list("
          for schema in "${schemas[@]}"; do
            CONN_POST_CONNECT+="\"CREATE SCHEMA IF NOT EXISTS '${schema}';\", "
          done
          # Trim trailing ", " from CONN_POST_CONNECT
          CONN_POST_CONNECT=${CONN_POST_CONNECT%??}
          CONN_POST_CONNECT+=")"

          echo "BACKEND_POST_CONNECT=$CONN_POST_CONNECT" >> $GITHUB_ENV

      - name: Generate and Save Coverage Report
        run: |
          coverage <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
          saveRDS(coverage, "coverage_results.rds")
        shell: Rscript {0}

      - name: Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-duckdb
          path: coverage_results.rds

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${{ runner.temp }}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          grep -q "FAIL 0" $TESTTHAT_OUT || { echo "Test failures found"; exit 1; }
          grep -q "WARN 0" $TESTTHAT_OUT || { echo "Test warnings found"; exit 1; }

          # Throw error if error: are found
          if grep -q "Error:" $TESTTHAT_OUT; then
            echo "Error: found"
            exit 1
          fi
        shell: bash


  code-coverage-postgres:
    name: "ðŸ§ª Tests: PostgreSQL"
    runs-on: ubuntu-latest
    if: ${{ !contains(inputs.backend_exclude, 'postgres')}}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      BACKEND: PostgreSQL
      BACKEND_DRV: RPostgres::Postgres
      BACKEND_ARGS: ''
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

      PGHOST: localhost
      PGPORT: 5432
      PGDATABASE: test
      PGUSER: postgres
      PGPASSWORD: postgres

    steps:
      - name: Setup testing schemata in PostgreSQL
        if: ${{ inputs.schemas != 'none' }}
        run: |
          set -o xtrace
          IFS=',' read -ra schemas <<< "${{ inputs.schemas }}"
          for schema in "${schemas[@]}"; do
            psql test -c "CREATE SCHEMA \"$schema\";"
          done

      - uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Install dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - name: Generate and Save Coverage Report
        run: |
          coverage <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
          saveRDS(coverage, "coverage_results.rds")
        shell: Rscript {0}

      - name: Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-postgres
          path: coverage_results.rds

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${{ runner.temp }}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          grep -q "FAIL 0" $TESTTHAT_OUT || { echo "Test failures found"; exit 1; }
          grep -q "WARN 0" $TESTTHAT_OUT || { echo "Test warnings found"; exit 1; }

          # Throw error if error: are found
          if grep -q "Error:" $TESTTHAT_OUT; then
            echo "Error: found"
            exit 1
          fi
        shell: bash


      - name: Collect docker logs
        if: always() && inputs.check_postgres_logs
        uses: jwalton/gh-docker-logs@v2
        with:
          dest: '${{ runner.workspace }}/logs-docker'

      - name: Check docker logs for PostgreSQL ERRORs
        if: always() && inputs.check_postgres_logs
        run: |
          ## --------------------------------------------------------------------
          log=$(find ${{ runner.workspace }}/logs-docker/ -name '*postgres*.log')

          errors=$(awk '/(ERROR:|STATEMENT:)/{flag=1}/LOG:|^[A-Z]/{flag=0}flag {print $0}' $log)

          echo "$output"

          # Throw error if ERRORs are found
          if [[ -n "$errors" ]]; then
            echo "$errors"
            exit 1
          fi


  code-coverage-mssql:
    name: "ðŸ§ª Tests: SQL Server 2022"
    runs-on: ubuntu-latest
    if: ${{ !contains(inputs.backend_exclude, 'mssql')}}

    env:
      BACKEND: MSSQL
      BACKEND_DRV: odbc::odbc
      BACKEND_ARGS: ''
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

      CONN_ARGS_JSON: >
        {
          "MSSQL": {
            "driver": "ODBC Driver 18 for SQL Server",
            "server": "localhost",
            "database": "master",
            "UID": "SA",
            "PWD": "dbatools.I0",
            "TrustServerCertificate": "yes"
          }
        }

    steps:
      - name: Install a SQL Server suite of tools
        uses: potatoqualitee/mssqlsuite@v1.8
        with:
          install: sqlengine, sqlpackage, sqlclient
          version: 2022
          show-log: true

      - name: Setup testing schemata in SQL server
        if: ${{ inputs.schemas != 'none' }}
        run: |
          set -o xtrace

          sqlcmd -V 10 -S localhost -U SA -P dbatools.I0 -Q "ALTER LOGIN SA WITH DEFAULT_DATABASE = master;" -C

          IFS=',' read -ra schemas <<< "${{ inputs.schemas }}"
          for schema in "${schemas[@]}"; do
            sqlcmd -V 10 -S localhost -U SA -P dbatools.I0 -d master -Q "CREATE SCHEMA [$schema];" -C
            sqlcmd -V 10 -S localhost -U SA -P dbatools.I0 -d master -Q "GO" -C
          done

          sqlcmd -V 10 -S localhost -U SA -P dbatools.I0 -d master -Q "SELECT * FROM sys.schemas" -C

          for schema in "${schemas[@]}"; do
            sqlcmd -V 10 -S localhost -U SA -P dbatools.I0 -d master -Q "SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA WHERE schema_name = '$schema'"  -C
          done

      - uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Install dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - name: Generate and Save Coverage Report
        run: |
          coverage <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
          saveRDS(coverage, "coverage_results.rds")
        shell: Rscript {0}

      - name: Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-sql-server
          path: coverage_results.rds

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${{ runner.temp }}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          grep -q "FAIL 0" $TESTTHAT_OUT || { echo "Test failures found"; exit 1; }
          grep -q "WARN 0" $TESTTHAT_OUT || { echo "Test warnings found"; exit 1; }

          # Throw error if error: are found
          if grep -q "Error:" $TESTTHAT_OUT; then
            echo "Error: found"
            exit 1
          fi
        shell: bash

      - name: Collect docker logs
        if: always()
        uses: jwalton/gh-docker-logs@v2
        with:
          dest: '${{ runner.workspace }}/logs-docker'

      - name: Check docker logs for SQL Server ERRORs
        if: always()
        run: |
          ## --------------------------------------------------------------------
          log=$(find ${{ runner.workspace }}/logs-docker/ -name 'sql.log')

          cat "$log"


  code-coverage-oracle:
    name: "ðŸ§ª Tests: Oracle Database"
    runs-on: ubuntu-latest
    if: ${{ !contains(inputs.backend_exclude, 'oracle')}}

    env:
      BACKEND: Oracle
      BACKEND_DRV: odbc::odbc
      BACKEND_ARGS: ''
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

      CONN_ARGS_JSON: >
        {
          "Oracle": {
            "driver": "Oracle",
            "DBQ": "localhost:1521/FREEPDB1",
            "UID": "github_ci",
            "PWD": "github_ci"
          }
        }

    steps:
      - name: Setup Oracle database
        uses: gvenzl/setup-oracle-free@v1
        with:
          app-user: github_ci
          app-user-password: github_ci
          container-name: oracledb

      - name: Setup testing schemata in Oracle database
        if: ${{ inputs.schemas != 'none' }}
        run: |
          set -o xtrace

          # List all containers to find the Oracle container
          echo "Available Podman containers:"
          podman ps

          # Get the Oracle container ID/name
          ORACLE_CONTAINER=$(podman ps --filter "ancestor=gvenzl/oracle-free" --format "{{.Names}}")
          echo "Oracle container found: $ORACLE_CONTAINER"

          # Connect to Oracle and create schemas
          IFS=',' read -ra schemas <<< "${{ inputs.schemas }}"
          for schema in "${schemas[@]}"; do
            # Create user/schema with password
            podman exec -i $ORACLE_CONTAINER bash -c "echo 'CREATE USER \"${schema}\" IDENTIFIED BY \"${schema}_pwd\";' | sqlplus -S / as sysdba"

            # Grant necessary privileges
            podman exec -i $ORACLE_CONTAINER bash -c "echo 'GRANT CREATE SESSION TO \"${schema}\";' | sqlplus -S / as sysdba"
            podman exec -i $ORACLE_CONTAINER bash -c "echo 'GRANT CREATE TABLE TO \"${schema}\";' | sqlplus -S / as sysdba"
            podman exec -i $ORACLE_CONTAINER bash -c "echo 'GRANT UNLIMITED TABLESPACE TO \"${schema}\";' | sqlplus -S / as sysdba"
          done

          # Verify schemas were created
          podman exec -i $ORACLE_CONTAINER bash -c "echo 'SELECT username FROM dba_users WHERE username IN ($(printf "'%s'," "${schemas[@]}" | sed 's/,$/\n/'));' | sqlplus -S / as sysdba"

          # Show individual schema details
          for schema in "${schemas[@]}"; do
            podman exec -i $ORACLE_CONTAINER bash -c "echo 'SELECT username, account_status FROM dba_users WHERE username = \"${schema}\";' | sqlplus -S / as sysdba"
          done
      - uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Install dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - name: Generate and Save Coverage Report
        run: |
          coverage <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
          saveRDS(coverage, "coverage_results.rds")
        shell: Rscript {0}

      - name: Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-sql-server
          path: coverage_results.rds

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${{ runner.temp }}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          grep -q "FAIL 0" $TESTTHAT_OUT || { echo "Test failures found"; exit 1; }
          grep -q "WARN 0" $TESTTHAT_OUT || { echo "Test warnings found"; exit 1; }

          # Throw error if error: are found
          if grep -q "Error:" $TESTTHAT_OUT; then
            echo "Error: found"
            exit 1
          fi
        shell: bash

      - name: Collect podman logs
        if: always()
        run: |
          podman logs oracledb > ${{ runner.workspace }}/oracle.log

      - name: Check podman logs for Oracle ERRORs
        if: always()
        run: |
          ## --------------------------------------------------------------------
          log="${{ runner.workspace }}/oracle.log"

          cat "$log"

          # Check for errors in the log
          errors=$(grep -i "ORA-[0-9]\|ERROR:" "$log" || true)
          if [[ -n "$errors" ]]; then
            echo "Found errors in Oracle logs:"
            echo "$errors"
            exit 1
          fi


  combine-and-upload-coverage:
    name: "ðŸ§ª Tests: Upload to codecov.io"
    needs: [code-coverage-sqlite, code-coverage-duckdb, code-coverage-postgres, code-coverage-mssql]
    runs-on: ubuntu-latest

    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Install dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - uses: actions/download-artifact@v4
        with:
          path: coverage-reports

      - name: List downloaded artifacts
        run: ls -R coverage-reports
        shell: bash

      - name: Combine Coverage Reports and upload to codecov.io
        run: |
          files <- list.files(
            "coverage-reports",
            full.names = TRUE,
            pattern = "coverage_results\\.rds$",
            recursive = TRUE
          )

          coverages <- purrr::map(files, readRDS)

          combined_coverage <- purrr::reduce(coverages, c)

          attr(combined_coverage, "class") <- attr(coverages[[1]], "class")
          attr(combined_coverage, "package") <- attr(coverages[[1]], "package")
          attr(combined_coverage, "relative") <- attr(coverages[[1]], "relative")

          tryCatch(
            {
              covr::codecov(coverage = combined_coverage)
            },
            error = function(e) {
              message("Failed to upload coverage report to Codecov: ", e$message)
              quit(status = 1)
            }
          )

        shell: Rscript {0}