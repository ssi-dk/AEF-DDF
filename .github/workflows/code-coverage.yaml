on:
  workflow_call:
    inputs:
      container:
        type: string
        required: false
        default: 'null'
      cache_version:
        type: string
        default: '1'
      schemas:
        type: string
        default: ''
      backend_exclude:
        type: string
        default: ''
      check_postgres_logs:
        type: boolean
        default: true


jobs:
  code-coverage-sqlite:
    if: ${{ !contains(inputs.backend_exclude, 'sqlite')}}
    name: "🧪 Tests: ${{ matrix.config.backend }}"
    runs-on: ubuntu-latest
    container: ${{ fromJSON(inputs.container) }}
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        config:
          - backend: SQLite
            id: sqlite
            args: 'list(dbname = file.path(tempdir(), "SQLite.SQLite"))'
            schemas: ''

          - backend: SQLite - w. schemas
            id: sqlite-schemas
            args: 'list(dbname = file.path(tempdir(), "SQLite_schemas.SQLite"))'
            schemas: ${{ inputs.schemas }}

    env:
      BACKEND: ${{ matrix.config.backend }}
      BACKEND_DRV: RSQLite::SQLite
      BACKEND_ARGS: ${{ matrix.config.args }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: 🔧 Setup R
        if: ${{ inputs.container == 'null' }}
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: 🔧 Install R dependencies
        if: ${{ inputs.container == 'null' }}
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - name: 🔧 Setup BACKEND_POST_CONNECT
        if: ${{ matrix.config.schemas != '' }}
        run: |
          set -o xtrace
          IFS=',' read -ra schemas <<< "${{ matrix.config.schemas }}"

          CONN_POST_CONNECT="list("
          for schema in "${schemas[@]}"; do
            CONN_POST_CONNECT+="paste0(\"ATTACH '\", file.path(tempdir(), \"SQLite_schemas_${schema}.SQLite\"), \"' AS '${schema}'\"), "
          done
          # Trim trailing ", " from CONN_POST_CONNECT
          CONN_POST_CONNECT=${CONN_POST_CONNECT%??}
          CONN_POST_CONNECT+=")"

          echo "BACKEND_POST_CONNECT=$CONN_POST_CONNECT" >> $GITHUB_ENV

      - name: 🧪 Generate and Save Coverage Report
        run: |
          coverage <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
          saveRDS(coverage, "coverage_results.rds")
        shell: Rscript {0}

      - name: ⬆️ Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.config.id }}
          path: coverage_results.rds

      - name: 🐞 Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${RUNNER_TEMP}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          grep -q "FAIL 0" $TESTTHAT_OUT || { echo "Test failures found"; exit 1; }
          grep -q "WARN 0" $TESTTHAT_OUT || { echo "Test warnings found"; exit 1; }

          # Throw error if error: are found
          if grep -q "Error:" $TESTTHAT_OUT; then
            echo "Error: found"
            exit 1
          fi
        shell: bash


  code-coverage-duckdb:
    if: ${{ !contains(inputs.backend_exclude, 'duckdb')}}
    name: "🧪 Tests: DuckDB"
    runs-on: ubuntu-latest
    container: ${{ fromJSON(inputs.container) }}
    defaults:
      run:
        shell: bash

    env:
      BACKEND: DuckDB
      BACKEND_DRV: duckdb::duckdb
      BACKEND_ARGS: 'list(dbdir = file.path(tempdir(), "DuckDB.duckdb"))'
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: 🔧 Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: 🔧 Setup R
        if: ${{ inputs.container == 'null' }}
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: 🔧 Install R dependencies
        if: ${{ inputs.container == 'null' }}
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - name: 🔧 Setup BACKEND_POST_CONNECT
        run: |
          set -o xtrace
          IFS=',' read -ra schemas <<< "${{ inputs.schemas }}"

          CONN_POST_CONNECT="list("
          for schema in "${schemas[@]}"; do
            CONN_POST_CONNECT+="\"CREATE SCHEMA IF NOT EXISTS '${schema}';\", "
          done
          # Trim trailing ", " from CONN_POST_CONNECT
          CONN_POST_CONNECT=${CONN_POST_CONNECT%??}
          CONN_POST_CONNECT+=")"

          echo "BACKEND_POST_CONNECT=$CONN_POST_CONNECT" >> $GITHUB_ENV

      - name: 🧪 Generate and Save Coverage Report
        run: |
          coverage <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
          saveRDS(coverage, "coverage_results.rds")
        shell: Rscript {0}

      - name: ⬆️ Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-duckdb
          path: coverage_results.rds

      - name: 🐞 Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${RUNNER_TEMP}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          grep -q "FAIL 0" $TESTTHAT_OUT || { echo "Test failures found"; exit 1; }
          grep -q "WARN 0" $TESTTHAT_OUT || { echo "Test warnings found"; exit 1; }

          # Throw error if error: are found
          if grep -q "Error:" $TESTTHAT_OUT; then
            echo "Error: found"
            exit 1
          fi
        shell: bash


  code-coverage-postgres:
    name: "🧪 Tests: PostgreSQL"
    runs-on: ubuntu-latest
    container: ${{ fromJSON(inputs.container) }}
    if: ${{ !contains(inputs.backend_exclude, 'postgres')}}
    defaults:
      run:
        shell: bash


    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      BACKEND: PostgreSQL
      BACKEND_DRV: RPostgres::Postgres
      BACKEND_ARGS: ''
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

      PGPORT: 5432
      PGDATABASE: test
      PGUSER: postgres
      PGPASSWORD: postgres

    steps:
      - name: 🔧 Install PostgreSQL client
        run: |
          apt-get update
          apt-get install -y postgresql-client

      - name: 🔧 Set environment variables
        run: |
          if [[ ${{ inputs.container }} == 'null' ]]; then
            echo "PGHOST=localhost" >> $GITHUB_ENV
          else
            echo "PGHOST=postgres" >> $GITHUB_ENV
          fi

      - name: 🔧 Setup testing schemata in PostgreSQL
        if: ${{ inputs.schemas != 'none' }}
        run: |
          set -o xtrace
          IFS=',' read -ra schemas <<< "${{ inputs.schemas }}"
          for schema in "${schemas[@]}"; do
            psql test -c "CREATE SCHEMA \"$schema\";"
          done

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: 🔧 Setup R
        if: ${{ inputs.container == 'null' }}
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: 🔧 Install R dependencies
        if: ${{ inputs.container == 'null' }}
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - name: 🧪 Generate and Save Coverage Report
        run: |
          coverage <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
          saveRDS(coverage, "coverage_results.rds")
        shell: Rscript {0}

      - name: ⬆️ Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-postgres
          path: coverage_results.rds

      - name: 🐞 Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${RUNNER_TEMP}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          grep -q "FAIL 0" $TESTTHAT_OUT || { echo "Test failures found"; exit 1; }
          grep -q "WARN 0" $TESTTHAT_OUT || { echo "Test warnings found"; exit 1; }

          # Throw error if error: are found
          if grep -q "Error:" $TESTTHAT_OUT; then
            echo "Error: found"
            exit 1
          fi
        shell: bash

      - name: 🐞 Collect docker logs
        if: always() && inputs.check_postgres_logs
        uses: jwalton/gh-docker-logs@v2
        with:
          dest: '${{ github.runner_temp }}/logs-docker'

      - name: 🐞 Check docker logs for PostgreSQL ERRORs
        if: always() && inputs.check_postgres_logs
        run: |
          log=$(find /logs-docker/ -name '*postgreslatest*.log')

          cat "$log"

          errors=$(awk '/(ERROR:|STATEMENT:)/{flag=1}/LOG:|^[A-Z]/{flag=0}flag {print $0}' $log)

          echo "$output"

          # Throw error if ERRORs are found
          if [[ -n "$errors" ]]; then
            echo "$errors"
            exit 1
          fi


  code-coverage-mssql:
    name: "🧪 Tests: SQL Server 2022"
    runs-on: ubuntu-latest
    container: ${{ fromJSON(inputs.container) }}
    if: ${{ !contains(inputs.backend_exclude, 'mssql')}}
    defaults:
      run:
        shell: bash

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: "Y"
          MSSQL_SA_PASSWORD: "dbatools.I0"
          MSSQL_PID: "Developer"
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P dbatools.I0 -Q 'SELECT 1' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --user root
        volumes:
          - ./data:/var/opt/mssql/data

    env:
      BACKEND: MSSQL
      BACKEND_DRV: odbc::odbc
      BACKEND_ARGS: ''
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

      CONN_ARGS_JSON: >


    steps:
      - name: 🔧 Set environment variables
        run: |
          if [[ ${{ inputs.container }} == 'null' ]]; then
            MSSQLHOST=localhost
          else
            MSSQLHOST=mssql
          fi

          echo "MSSQLHOST=${MSSQLHOST}" >> $GITHUB_ENV

          CONN_ARGS_JSON="{
            \"MSSQL\": {
              \"driver\": \"ODBC Driver 18 for SQL Server\",
              \"server\": \"${MSSQLHOST}\",
              \"database\": \"master\",
              \"UID\": \"SA\",
              \"PWD\": \"dbatools.I0\",
              \"TrustServerCertificate\": \"yes\",
              \"Regional\": \"no\"
            }
          }"

          echo "CONN_ARGS_JSON<<EOF" >> $GITHUB_ENV
          echo $CONN_ARGS_JSON >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 🔧 Install ODBC Driver and SQL Server tools
        run: |
          set -o xtrace

          if ! [[ "18.04 20.04 22.04 24.04 24.10" == *"$(grep VERSION_ID /etc/os-release | cut -d '"' -f 2)"* ]];
          then
              echo "Ubuntu $(grep VERSION_ID /etc/os-release | cut -d '"' -f 2) is not currently supported.";
              exit;
          fi

          # Download the package to configure the Microsoft repo
          curl -sSL -O https://packages.microsoft.com/config/ubuntu/$(grep VERSION_ID /etc/os-release | cut -d '"' -f 2)/packages-microsoft-prod.deb
          # Install the package
          sudo dpkg -i packages-microsoft-prod.deb
          # Delete the file
          rm packages-microsoft-prod.deb

          # Install the driver
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18

          echo "/opt/mssql-tools18/bin" >> $GITHUB_PATH

      - name: 🔧 Setup testing schemata in SQL server
        if: ${{ inputs.schemas != 'none' }}
        run: |
          set -o xtrace

          sqlcmd -V 10 -S ${{ env.MSSQLHOST }} -U SA -P dbatools.I0 -Q "ALTER LOGIN SA WITH DEFAULT_DATABASE = master;" -C

          IFS=',' read -ra schemas <<< "${{ inputs.schemas }}"
          for schema in "${schemas[@]}"; do
            sqlcmd -V 10 -S ${{ env.MSSQLHOST }} -U SA -P dbatools.I0 -d master -Q "CREATE SCHEMA [$schema];" -C
            sqlcmd -V 10 -S ${{ env.MSSQLHOST }} -U SA -P dbatools.I0 -d master -Q "GO" -C
          done

          sqlcmd -V 10 -S ${{ env.MSSQLHOST }} -U SA -P dbatools.I0 -d master -Q "SELECT * FROM sys.schemas" -C

          for schema in "${schemas[@]}"; do
            sqlcmd -V 10 -S ${{ env.MSSQLHOST }} -U SA -P dbatools.I0 -d master -Q "SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA WHERE schema_name = '$schema'"  -C
          done

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: 🔧 Setup R
        if: ${{ inputs.container == 'null' }}
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: 🔧 Install R dependencies
        if: ${{ inputs.container == 'null' }}
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - name: 🧪 Generate and Save Coverage Report
        run: |
          coverage <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
          saveRDS(coverage, "coverage_results.rds")
        shell: Rscript {0}

      - name: ⬆️ Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-sql-server
          path: coverage_results.rds

      - name: 🐞 Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${RUNNER_TEMP}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          grep -q "FAIL 0" $TESTTHAT_OUT || { echo "Test failures found"; exit 1; }
          grep -q "WARN 0" $TESTTHAT_OUT || { echo "Test warnings found"; exit 1; }

          # Throw error if error: are found
          if grep -q "Error:" $TESTTHAT_OUT; then
            echo "Error: found"
            exit 1
          fi
        shell: bash

      - name: 🐞 Collect docker logs
        if: always()
        uses: jwalton/gh-docker-logs@v2
        with:
          dest: '${{ github.runner_temp }}/logs-docker'

      - name: 🐞 Check docker logs for SQL Server ERRORs
        if: always()
        run: |
          log=$(find /logs-docker/ -name '*mssqlserver2022latest*.log')

          cat "$log"

          # Check for errors in the log
          errors=$(grep -iE "Error:|Severity: (1[6-9]|2[0-5])|Msg [0-9]+, Level (1[6-9]|2[0-5])" "$log" || true)
          if [[ -n "$errors" ]]; then
            echo "Found errors in SQL Server logs:"
            echo "$errors"
            exit 1
          fi


  code-coverage-oracle:
    name: "🧪 Tests: Oracle Database (Experimental)"
    runs-on: ubuntu-latest
    container: ${{ fromJSON(inputs.container) }}
    if: ${{ !contains(inputs.backend_exclude, 'oracle')}}
    defaults:
      run:
        shell: bash

    services:
      oracledb:
        image: gvenzl/oracle-free:latest
        env:
          APP_USER: "github_ci"
          APP_USER_PASSWORD: "github_ci"
          ORACLE_RANDOM_PASSWORD: true
        ports:
          - 1521:1521
        options: >-
          --health-cmd healthcheck.sh
          --health-interval 20s
          --health-timeout 10s
          --health-retries 10

    env:
      BACKEND: Oracle
      BACKEND_DRV: RJDBC::JDBC
      BACKEND_ARGS: ''
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: 🐞 Dump github context
        run:   echo "$CONTEXT"
        shell: bash
        env:
         CONTEXT: ${{ toJson(job.code-coverage-oracle) }}

      - name: 🔧 Set environment variables
        run: |
          if [[ ${{ inputs.container }} == 'null' ]]; then
            ORACLEHOST=localhost
          else
            ORACLEHOST=oracledb
          fi

          echo "ORACLEHOST=${ORACLEHOST}" >> $GITHUB_ENV

          CONN_ARGS_JSON="{
            \"Oracle\": {
              \"driverClass\": \"oracle.jdbc.OracleDriver\",
              \"classPath\": \"/usr/lib/oracle/ojdbc8.jar\",
              \"url\": \"jdbc:oracle:thin:@${ORACLEHOST}:1521/FREEPDB1\",
              \"user\": \"github_ci\",
              \"password\": \"github_ci\"
            }
          }"

          echo "CONN_ARGS_JSON<<EOF" >> $GITHUB_ENV
          echo $CONN_ARGS_JSON >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check running containers
        run: docker ps -a

      - name: Check container networks
        run: docker network ls

      - name: 🔧 Connect to docker network
        run: docker network connect ${{ job.services.oracledb.network }}

      - name: 🔧 Setup testing schemata in Oracle
        if: ${{ inputs.schemas != 'none' }}
        run: |
          echo "ALTER SESSION SET CONTAINER = FREEPDB1;" > setup.sql
          echo "" >> setup.sql

          # Create schemas from input
          IFS=',' read -ra schemas <<< "${{ inputs.schemas }}"
          for schema in "${schemas[@]}"; do
            # Create user/schema
            echo "CREATE USER \"${schema}\" IDENTIFIED BY \"${schema}_pwd\";" >> setup.sql

            # Grant privileges
            echo "GRANT CREATE SESSION, CREATE TABLE, UNLIMITED TABLESPACE TO \"${schema}\";" >> setup.sql
            echo "" >> setup.sql
          done

          # Grant privileges to github_ci user
          echo "GRANT CREATE ANY TABLE, SELECT ANY TABLE, INSERT ANY TABLE, UPDATE ANY TABLE, DROP ANY TABLE, CREATE ANY INDEX TO github_ci;" >> setup.sql

          cat setup.sql

          docker cp setup.sql oracledb:/tmp/setup.sql
          docker exec -it oracledb sqlplus github_ci/github_ci@//oracledb:1521/ORCLPDB1 @/tmp/setup.sql

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: 🔧 Install Oracle JDBC driver
        run: |
          sudo apt-get update
          # Create directory for the driver with sudo
          sudo mkdir -p /usr/lib/oracle

          # Download the Oracle JDBC driver directly from Maven Central with sudo
          sudo curl -o /usr/lib/oracle/ojdbc8.jar https://repo1.maven.org/maven2/com/oracle/database/jdbc/ojdbc8/21.5.0.0/ojdbc8-21.5.0.0.jar

          # Verify the driver was downloaded successfully
          if sudo test -f "/usr/lib/oracle/ojdbc8.jar"; then
            echo "Oracle JDBC driver downloaded successfully"
            sudo ls -la /usr/lib/oracle/
            # Make the JAR file readable by everyone
            sudo chmod 644 /usr/lib/oracle/ojdbc8.jar
          else
            echo "Failed to download Oracle JDBC driver"
            exit 1
          fi

      - name: 🔧 Set up Oracle JDK
        uses: actions/setup-java@v5
        with:
          distribution: oracle
          java-version: 25

      - name: 🔧 Setup R
        if: ${{ inputs.container == 'null' }}
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: 🔧 Install R dependencies
        if: ${{ inputs.container == 'null' }}
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - name: 🔧 Configure Java for R
        run: |
          # Create .Rprofile to automatically set Java classpath
          echo 'Sys.setenv(JAVA_HOME = Sys.getenv("JAVA_HOME"))' > ~/.Rprofile
          echo 'Sys.setenv(CLASSPATH = "/usr/lib/oracle/ojdbc8.jar")' >> ~/.Rprofile

          # Test the JDBC connection
          Rscript -e '
            library(RJDBC)

            # Print Java version and classpath to debug
            print(system("java -version", intern = TRUE))
            print(Sys.getenv("CLASSPATH"))
            print(Sys.getenv("JAVA_HOME"))

            # Initialize the Oracle driver explicitly
            drv <- JDBC("oracle.jdbc.OracleDriver", "/usr/lib/oracle/ojdbc8.jar")
            print("JDBC driver initialized successfully")

            # Try to connect
            conn <- tryCatch({
              dbConnect(
                drv,
                "jdbc:oracle:thin:@${{ env.ORACLEHOST }}:1521/FREEPDB1",
                "github_ci",
                "github_ci"
              )
            }, error = function(e) {
              print(paste("Connection error:", e$message))
              NULL
            })

            if (!is.null(conn)) {
              print("Successfully connected to Oracle!")
              dbDisconnect(conn)
            }
          '

      - name: 🧪 Generate and Save Coverage Report
        run: |
          coverage <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
          saveRDS(coverage, "coverage_results.rds")
        shell: Rscript {0}

      - name: ⬆️ Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-oracle
          path: coverage_results.rds

      - name: 🐞 Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${RUNNER_TEMP}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          grep -q "FAIL 0" $TESTTHAT_OUT || { echo "Test failures found"; exit 1; }
          grep -q "WARN 0" $TESTTHAT_OUT || { echo "Test warnings found"; exit 1; }

          # Throw error if error: are found
          if grep -q "Error:" $TESTTHAT_OUT; then
            echo "Error: found"
            exit 1
          fi
        shell: bash

      - name: 🐞 Collect docker logs
        if: always()
        uses: jwalton/gh-docker-logs@v2
        with:
          dest: '${{ github.runner_temp }}/logs-docker'

      - name: 🐞 Check docker logs for Oracle ERRORs
        if: always()
        run: |
          log=$(find /logs-docker/ -name '*oraclefreelatest*.log')

          cat "$log"

          # Check for errors in the log
          errors=$(grep -i "ORA-[0-9]\|ERROR:" "$log" || true)
          if [[ -n "$errors" ]]; then
            echo "Found errors in Oracle logs:"
            echo "$errors"
            exit 1
          fi


  combine-and-upload-coverage:
    name: "🧪 Tests: Upload to codecov.io"
    needs: [code-coverage-sqlite, code-coverage-duckdb, code-coverage-postgres, code-coverage-mssql]
    runs-on: ubuntu-latest
    container: ${{ fromJSON(inputs.container) }}
    defaults:
      run:
        shell: bash

    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: 🔧 Setup R
        if: ${{ inputs.container == 'null' }}
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: 🔧 Install R dependencies
        if: ${{ inputs.container == 'null' }}
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - name: ⬇️ Download artifacts from tests
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports

      - name: 🐞 List downloaded artifacts
        run: ls -R coverage-reports
        shell: bash

      - name: ⬆️ Combine Coverage Reports and upload to codecov.io
        run: |
          files <- list.files(
            "coverage-reports",
            full.names = TRUE,
            pattern = "coverage_results\\.rds$",
            recursive = TRUE
          )

          coverages <- purrr::map(files, readRDS)

          combined_coverage <- purrr::reduce(coverages, c)

          attr(combined_coverage, "class") <- attr(coverages[[1]], "class")
          attr(combined_coverage, "package") <- attr(coverages[[1]], "package")
          attr(combined_coverage, "relative") <- attr(coverages[[1]], "relative")

          tryCatch(
            {
              covr::codecov(coverage = combined_coverage)
            },
            error = function(e) {
              message("Failed to upload coverage report to Codecov: ", e$message)
              quit(status = 1)
            }
          )

        shell: Rscript {0}