on:
  workflow_call:
    inputs:
      run:
        type: boolean
        default: true
      schemas:
        type: string
        default: ''
      backend_exclude:
        type: string
        default: ''


jobs:
  code-coverage-sqlite:
    if: ${{ inputs.run && !contains(inputs.backend_exclude, 'sqlite')}}
    name: ðŸ§ª Tests (${{ matrix.config.backend }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        config:
          - backend: SQLite
            args: 'list(dbname = file.path(tempdir(), "SQLite.SQLite"))'
            post_connect: ''

          - backend: SQLite - w. schemas
            args: 'list(dbname = file.path(tempdir(), "SQLite_schemas.SQLite"))'
            post_connect: >
              list(paste0("ATTACH '", file.path(tempdir(), "SQLite_schemas_test.SQLite"), "' AS 'test'"),
                   paste0("ATTACH '", file.path(tempdir(), "SQLite_schemas_test_one.SQLite"), "' AS 'test.one'"))

    env:
      BACKEND: ${{ matrix.config.backend }}
      BACKEND_DRV: RSQLite::SQLite
      BACKEND_ARGS: ${{ matrix.config.args }}
      BACKEND_POST_CONNECT: ${{ matrix.config.post_connect }}

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::covr
          needs: coverage

      - name: Test coverage
        run: |
          covr::codecov(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${{ runner.temp }}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          [[ "$TESTTHAT_OUT" =~ FAIL" "0 ]] || { echo "Test failures found";  exit 1; }
          [[ "$TESTTHAT_OUT" =~ WARN" "0 ]] || { echo "Test warnings found";  exit 1; }
        shell: bash

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-test-failures
          path: ${{ runner.temp }}/package


  code-coverage-postgres:
    name: ðŸ§ª Tests (PostgreSQL)
    runs-on: ubuntu-latest
    if: ${{ inputs.run && !contains(inputs.backend_exclude, 'postgres')}}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      BACKEND: PostgreSQL
      BACKEND_DRV: RPostgres::Postgres
      BACKEND_ARGS: ''

      PGHOST: localhost
      PGPORT: 5432
      PGDATABASE: test
      PGUSER: postgres
      PGPASSWORD: postgres

    steps:
      - name: Setup testing schemata in PostgreSQL
        if: ${{ inputs.schemas != 'none' }}
        run: |
          set -o xtrace
          IFS=',' read -ra schemas <<< "${{ inputs.schemas }}"
          for schema in "${schemas[@]}"; do
            psql test -c "CREATE SCHEMA \"$schema\";"
          done

      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::covr
          needs: coverage

      - name: Test coverage
        run: |
          covr::codecov(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${{ runner.temp }}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          grep -Fxq "FAIL 0" $TESTTHAT_OUT || { echo "Test failures found";  exit 1; }
          grep -Fxq "WARN 0" $TESTTHAT_OUT || { echo "Test warnings found";  exit 1; }
        shell: bash

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-test-failures
          path: ${{ runner.temp }}/package


  code-coverage-mssql:
    name: ðŸ§ª Tests (SQL Server 2019)
    runs-on: ubuntu-latest
    if: ${{ inputs.run && !contains(inputs.backend_exclude, 'mssql')}}

    env:
      BACKEND: MSSQL
      BACKEND_DRV: odbc::odbc
      BACKEND_ARGS: ''

      CONN_ARGS_JSON: >
        {
          "MSSQL": {
            "driver": "ODBC Driver 17 for SQL Server",
            "server": "localhost",
            "database": "tempdb",
            "UID": "SA",
            "PWD": "dbatools.I0"
          }
        }

    steps:
      - name: Install a SQL Server suite of tools
        uses: potatoqualitee/mssqlsuite@v1.7
        with:
          install: sqlengine, sqlpackage, sqlclient

      - name: Setup testing schemata in SQL server
        if: ${{ inputs.schemas != 'none' }}
        run: |
          set -o xtrace
          IFS=',' read -ra schemas <<< "${{ inputs.schemas }}"
          for schema in "${schemas[@]}"; do
            sqlcmd -V 10 -S localhost -U SA -P dbatools.I0 -d tempdb -Q "CREATE SCHEMA [$schema];"
            sqlcmd -V 10 -S localhost -U SA -P dbatools.I0 -d tempdb -Q "GO"
          done

          sqlcmd -V 10 -S localhost -U SA -P dbatools.I0 -d tempdb -Q "SELECT * FROM sys.schemas"

          sqlcmd -V 10 -S localhost -U SA -P dbatools.I0 -d tempdb -Q "SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA WHERE schema_name = 'test'"
          sqlcmd -V 10 -S localhost -U SA -P dbatools.I0 -d tempdb -Q "SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA WHERE schema_name = 'test.one'"

      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::covr
          needs: coverage

      - name: Test coverage
        run: |
          covr::codecov(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          TESTTHAT_OUT=$(find ${{ runner.temp }}/package -name 'testthat.Rout*')

          cat $TESTTHAT_OUT

          # Throw errors on failures or warnings
          [[ "$TESTTHAT_OUT" =~ FAIL" "0 ]] || { echo "Test failures found";  exit 1; }
          [[ "$TESTTHAT_OUT" =~ WARN" "0 ]] || { echo "Test warnings found";  exit 1; }
        shell: bash

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-test-failures
          path: ${{ runner.temp }}/package
