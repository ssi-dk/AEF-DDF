# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  workflow_call:
    inputs:
      cache_version:
        type: string
        default: '1'
      rcmdcheck_args:
        type: string
        default: 'c("--no-manual", "--as-cran", "--no-tests")'
      min_r_version:
        type: string
        default: '4.0'


jobs:
  build-package:
    runs-on: ubuntu-latest
    name: "ðŸ”Ž Check: Build package"

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - name: "Build R package"
        run: |
          build_tar <- devtools::build(path = ".")
        shell: Rscript {0}

      - uses: actions/upload-artifact@v4
        with:
          name: package-tarball
          path: "*.tar.gz"


  R-CMD-check:
    needs: build-package
    name: "ðŸ”Ž Check: ${{ matrix.config.os }} (${{ matrix.config.r }})"
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macos-13,        r: 'release'} # x68 architecture
          - {os: macos-latest,    r: 'release'} # arm64 architecture
          - {os: windows-latest,  r: 'release'}
          - {os: ubuntu-latest,   r: 'release'}
          - {os: ubuntu-latest,   r: 'oldrel-1'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      BACKEND: SQLite
      BACKEND_DRV: RSQLite::SQLite
      BACKEND_ARGS: 'list(dbname = file.path(tempdir(), "SQLite.SQLite"))'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: |
            local::.
            any::pak
            any::jsonlite
            any::rcmdcheck
            any::devtools
            any::lintr
            any::covr
            any::roxygen2
            any::pkgdown
            any::rmarkdown
            any::styler
          needs: build, check, coverage, roxygen2, lint, website

      - uses: actions/download-artifact@v4
        with:
          name: package-tarball
          path: "./pkg-build"

      - name: Determine tar ball name
        id: tarball
        run: echo "tarball=$(ls *.tar.gz)" >> $GITHUB_ENV
        working-directory: pkg-build

      - uses: RasmusSkytte/actions/check-r-package@v2-branch
        with:
          path: '"./${{ env.tarball }}"'
          working-directory: pkg-build
          upload-snapshots: true
          args: ${{ inputs.rcmdcheck_args }}
          error-on: '"note"'


  R-CMD-check-hard:
    needs: build-package
    runs-on: ubuntu-latest

    name: "ðŸ”Ž Check: ubuntu (release, no dependencies)"

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      BACKEND: SQLite
      BACKEND_DRV: RSQLite::SQLite
      BACKEND_ARGS: 'list(dbname = file.path(tempdir(), "SQLite.SQLite"))'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}-hard
          dependencies: '"hard"'
          extra-packages: |
            any::rcmdcheck
            any::testthat
            any::knitr
            any::rmarkdown
            any::devtools
          needs: check

      - uses: actions/download-artifact@v4
        with:
          name: package-tarball
          path: "./pkg-build"

      - name: Determine tar ball name
        id: tarball
        run: echo "tarball=$(ls *.tar.gz)" >> $GITHUB_ENV
        working-directory: pkg-build

      - uses: RasmusSkytte/actions/check-r-package@v2-branch
        with:
          path: '"./${{ env.tarball }}"'
          upload-snapshots: true
          working-directory: pkg-build
          snapshot-artifact-name: "r-release-hard-snapshot"


  R-CMD-check-devel:
    needs: build-package
    runs-on: ubuntu-latest

    name: "ðŸ”Ž Check: ubuntu (r-devel)"

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      BACKEND: SQLite
      BACKEND_DRV: RSQLite::SQLite
      BACKEND_ARGS: 'list(dbname = file.path(tempdir(), "SQLite.SQLite"))'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'devel'
          use-public-rspm: true

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: any::rcmdcheck, any::devtools
          needs: check

      - uses: actions/download-artifact@v4
        with:
          name: package-tarball
          path: "./pkg-build"

      - name: Determine tar ball name
        id: tarball
        run: echo "tarball=$(ls *.tar.gz)" >> $GITHUB_ENV
        working-directory: pkg-build

      - uses: RasmusSkytte/actions/check-r-package@v2-branch
        with:
          path: '"${{ env.tarball }}"'
          upload-snapshots: true
          error-on: '"note"'
          working-directory: pkg-build
          snapshot-artifact-name: "r-devel-snapshot"


  R-CMD-check-min-supported:
    needs: build-package
    runs-on: ubuntu-latest

    name: "ðŸ”Ž Check: ubuntu (R v${{ inputs.min_r_version }})"

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      BACKEND: SQLite
      BACKEND_DRV: RSQLite::SQLite
      BACKEND_ARGS: 'list(dbname = file.path(tempdir(), "SQLite.SQLite"))'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ inputs.min_r_version }}
          use-public-rspm: true

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ inputs.cache_version }}
          extra-packages: any::rcmdcheck, any::devtools
          needs: check

      - uses: actions/download-artifact@v4
        with:
          name: package-tarball
          path: "./pkg-build"

      - name: Determine tar ball name
        id: tarball
        run: echo "tarball=$(ls *.tar.gz)" >> $GITHUB_ENV
        working-directory: pkg-build

      - uses: RasmusSkytte/actions/check-r-package@v2-branch
        with:
          path: '"./${{ env.tarball }}"'
          upload-snapshots: true
          error-on: '"note"'
          working-directory: pkg-build
          snapshot-artifact-name: "r-${{ inputs.min_r_version }}-snapshot"
